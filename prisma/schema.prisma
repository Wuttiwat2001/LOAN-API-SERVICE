// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum TransactionType {
  BORROW
  REPAY
}


model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  password  String
  firstName String   @default("")
  lastName  String   @default("")
  fullName  String   @default("")
  phone     String   @default("")
  role Role @default(USER)
  balance   Float    @default(0.0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  transactionsSent    Transaction[] @relation("Sender")
  transactionsReceived Transaction[] @relation("Receiver")
  requestsSent        Request[] @relation("RequestSender")
  requestsReceived    Request[] @relation("RequestReceiver")
}

model Transaction {
  id        Int      @id @default(autoincrement())
  senderId  Int
  receiverId Int
  amount    Float
  type      TransactionType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sender    User     @relation("Sender", fields: [senderId], references: [id])
  receiver  User     @relation("Receiver", fields: [receiverId], references: [id])
}

model Request {
  id          Int      @id @default(autoincrement())
  senderId    Int
  receiverId  Int
  amount      Float
  status      String   @default("รอดำเนินการ")
  description String   @default("")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  sender      User     @relation("RequestSender", fields: [senderId], references: [id])
  receiver    User     @relation("RequestReceiver", fields: [receiverId], references: [id])
}


